{
  "pdf_info": [
    {
      "preproc_blocks": [
        {
          "type": "title",
          "bbox": [
            53,
            119,
            151,
            142
          ],
          "lines": [
            {
              "bbox": [
                51,
                116,
                154,
                146
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    116,
                    154,
                    146
                  ],
                  "content": "While and If",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 0
        },
        {
          "type": "text",
          "bbox": [
            52,
            149,
            560,
            219
          ],
          "lines": [
            {
              "bbox": [
                51,
                150,
                561,
                222
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    150,
                    279,
                    162
                  ],
                  "content": "Learning to use if and while is an essential skill.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    150,
                    560,
                    177
                  ],
                  "content": "During this discussion, focus on what we’ve studied in the first three lectures: if, while, assignment ( = ) , comparison ( < , > , = = , \\ \\ldots ) , and arithmetic.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    163,
                    561,
                    191
                  ],
                  "content": "Please don’t use features of Python that we haven’t discussed in class yet, such as for, range, and lists.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    178,
                    560,
                    222
                  ],
                  "content": "We’ll have plenty of time for those later in the course, but now is the time to practice the use of if (textbook section 1.5.4) and while (textbook section 1.5.5).",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 1
        },
        {
          "type": "title",
          "bbox": [
            53,
            235,
            102,
            248
          ],
          "lines": [
            {
              "bbox": [
                52,
                235,
                103,
                250
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    235,
                    103,
                    250
                  ],
                  "content": "Q1: Race",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 2
        },
        {
          "type": "text",
          "bbox": [
            51,
            256,
            443,
            268
          ],
          "lines": [
            {
              "bbox": [
                52,
                255,
                444,
                269
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    255,
                    444,
                    269
                  ],
                  "content": "The race function below sometimes returns the wrong value and sometimes runs forever.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 3
        },
        {
          "type": "text",
          "bbox": [
            49,
            282,
            527,
            546
          ],
          "lines": [
            {
              "bbox": [
                51,
                285,
                463,
                542
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    285,
                    459,
                    327
                  ],
                  "content": "def race(x, y): \"\"\"The tortoise always walks x feet per minute, while the hare repeatedly runs y feet per minute for 5 minutes, then rests for 5 minutes.",
                  "type": "text"
                },
                {
                  "bbox": [
                    69,
                    313,
                    463,
                    542
                  ],
                  "content": "Return how many minutes pass until the tortoise first catches up to the hare. > > > race(5, 7) # After 7 minutes, both have gone 35 steps 7 > > > race(2, 4) # After 10 minutes, both have gone 20 steps 10 \"\"\" assert \\texttt { y } > \\texttt { x } and \\texttt { y } < = \\texttt { 2 } * \\texttt { x } , 'the hare must be fast but not too fast' tortoise, hare, minutes \\qquad = \\ 0 , 0, 0 while minutes \\scriptstyle = = 0 or tortoise - hare: tortoise + = \\texttt { x } if minutes \\% 1 0 < 5 : hare += y minutes += 1 return minutes",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 4
        },
        {
          "type": "text",
          "bbox": [
            51,
            567,
            558,
            629
          ],
          "lines": [
            {
              "bbox": [
                50,
                565,
                559,
                630
              ],
              "spans": [
                {
                  "bbox": [
                    50,
                    565,
                    559,
                    630
                  ],
                  "content": "Find positive integers \\mathtt { x } and \\mathtt { y } (with \\mathtt { y } larger than \\mathbf { x } but not larger than 2 \\texttt { * * } ) for which either: - race(x, y) returns the wrong value or - \\mathtt { r a c e ( x , \\ y ) } runs forever You just need to find one pair of numbers that satisfies either of these conditions to finish the question, but if you want to think of more you can.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 5
        },
        {
          "type": "text",
          "bbox": [
            51,
            636,
            555,
            664
          ],
          "lines": [
            {
              "bbox": [
                51,
                637,
                557,
                663
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    637,
                    557,
                    663
                  ],
                  "content": "Notes: - \\texttt { x } + = \\texttt { 1 } is the same as \\textbf { z } = \\textbf { x } + \\textbf { 1 } when \\mathbf { x } is assigned to a number. - 0 is a false value and all other numbers are true values.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 6
        }
      ],
      "page_idx": 0,
      "page_size": [
        612,
        792
      ]
    },
    {
      "preproc_blocks": [
        {
          "type": "title",
          "bbox": [
            53,
            46,
            121,
            59
          ],
          "lines": [
            {
              "bbox": [
                52,
                46,
                122,
                60
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    46,
                    122,
                    60
                  ],
                  "content": "Q2: Fizzbuzz",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 0
        },
        {
          "type": "text",
          "bbox": [
            53,
            67,
            555,
            158
          ],
          "lines": [
            {
              "bbox": [
                52,
                66,
                557,
                158
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    66,
                    239,
                    81
                  ],
                  "content": "Implement the classic F i z z B u z z sequence.",
                  "type": "text"
                },
                {
                  "bbox": [
                    52,
                    66,
                    557,
                    95
                  ],
                  "content": "The fizzbuzz function takes a positive integer \\mathbf { n } and prints out a single line for each integer from 1 to n.",
                  "type": "text"
                },
                {
                  "bbox": [
                    66,
                    81,
                    293,
                    158
                  ],
                  "content": "For each i: • If i is divisible by both 3 and 5, print fizzbuzz. • If i is divisible by 3 (but not 5), print fizz. • If i is divisible by 5 (but not 3), print buzz. • Otherwise, print the number i.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 1
        },
        {
          "type": "text",
          "bbox": [
            52,
            165,
            294,
            178
          ],
          "lines": [
            {
              "bbox": [
                52,
                165,
                295,
                179
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    165,
                    295,
                    179
                  ],
                  "content": "Try to make your implementation of fizzbuzz concise.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 2
        },
        {
          "type": "table",
          "bbox": [
            48,
            192,
            525,
            526
          ],
          "blocks": [
            {
              "type": "table_body",
              "bbox": [
                48,
                192,
                525,
                526
              ],
              "group_id": 0,
              "lines": [
                {
                  "bbox": [
                    48,
                    192,
                    525,
                    526
                  ],
                  "spans": [
                    {
                      "bbox": [
                        48,
                        192,
                        525,
                        526
                      ],
                      "score": 0.769,
                      "html": "<table><tr><td>def fizzbuzz(n): &quot;I I &quot;</td></tr><tr><td>&gt;&gt;&gt; result = fizzbuzz(16)</td></tr><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>fizz</td></tr><tr><td>4</td></tr><tr><td>buzz</td></tr><tr><td>fizz</td></tr><tr><td>7 8</td></tr><tr><td>fizz</td></tr><tr><td>buzz</td></tr><tr><td>11</td></tr><tr><td>fizz</td></tr><tr><td>13</td></tr><tr><td>14</td></tr><tr><td>fizzbuzz</td></tr><tr><td>16</td></tr><tr><td>&gt;&gt;&gt; print(result)</td></tr><tr><td>None II I I</td></tr><tr><td>&quot;*** YOUR CODE HERE ***&quot;</td></tr><tr><td></td></tr></table>",
                      "type": "table",
                      "image_path": "94de95046de3b294525c2b69f11f79400c1f31970fa667173663c838d91ec7d3.jpg"
                    }
                  ]
                }
              ],
              "index": 9,
              "virtual_lines": [
                {
                  "bbox": [
                    48,
                    192,
                    525,
                    303.3333333333333
                  ],
                  "spans": [],
                  "index": 8
                },
                {
                  "bbox": [
                    48,
                    303.3333333333333,
                    525,
                    414.66666666666663
                  ],
                  "spans": [],
                  "index": 9
                },
                {
                  "bbox": [
                    48,
                    414.66666666666663,
                    525,
                    526.0
                  ],
                  "spans": [],
                  "index": 10
                }
              ]
            }
          ],
          "index": 3,
          "lines": []
        }
      ],
      "page_idx": 1,
      "page_size": [
        612,
        792
      ]
    },
    {
      "preproc_blocks": [
        {
          "type": "title",
          "bbox": [
            53,
            42,
            179,
            66
          ],
          "lines": [
            {
              "bbox": [
                50,
                39,
                182,
                72
              ],
              "spans": [
                {
                  "bbox": [
                    50,
                    39,
                    182,
                    72
                  ],
                  "content": "Problem Solving",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 0
        },
        {
          "type": "text",
          "bbox": [
            52,
            73,
            560,
            163
          ],
          "lines": [
            {
              "bbox": [
                51,
                72,
                561,
                87
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    72,
                    318,
                    87
                  ],
                  "content": "A useful approach to implementing a function is to: 1.",
                  "type": "text"
                },
                {
                  "bbox": [
                    318,
                    72,
                    561,
                    87
                  ],
                  "content": "Pick an example input and corresponding output. 2.",
                  "type": "text"
                }
              ],
              "index": 0
            },
            {
              "bbox": [
                51,
                87,
                560,
                164
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    87,
                    490,
                    101
                  ],
                  "content": "Describe a process (in English) that computes the output from the input using simple steps. 3.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    87,
                    560,
                    115
                  ],
                  "content": "Figure out what additional names you’ll need to carry out this process. 4.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    101,
                    559,
                    129
                  ],
                  "content": "Implement the process in code using those additional names. 5.",
                  "type": "text"
                },
                {
                  "bbox": [
                    97,
                    115,
                    462,
                    129
                  ],
                  "content": "Determine whether the implementation really works on your original example. 6.",
                  "type": "text"
                },
                {
                  "bbox": [
                    52,
                    115,
                    559,
                    164
                  ],
                  "content": "Determine whether the implementation really works on other examples. (If not, you might need to revise step 2.) Importantly, this approach doesn’t go straight from reading a question to writing code.",
                  "type": "text"
                }
              ],
              "index": 1
            }
          ],
          "index": 1
        },
        {
          "type": "text",
          "bbox": [
            52,
            170,
            560,
            240
          ],
          "lines": [
            {
              "bbox": [
                52,
                172,
                560,
                184
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    172,
                    319,
                    184
                  ],
                  "content": "For example, in the is_prime problem below, you could: 1.",
                  "type": "text"
                },
                {
                  "bbox": [
                    319,
                    172,
                    560,
                    184
                  ],
                  "content": "Pick n is 9 as the input and False as the output. 2.",
                  "type": "text"
                }
              ],
              "index": 0
            },
            {
              "bbox": [
                51,
                185,
                560,
                241
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    185,
                    455,
                    199
                  ],
                  "content": "Here’s a process: Check that 9 (n) is not a multiple of any integers between 1 and 9 (n). 3.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    185,
                    560,
                    214
                  ],
                  "content": "Introduce i to represent each number between 1 and 9 (n). 4.",
                  "type": "text"
                },
                {
                  "bbox": [
                    223,
                    200,
                    535,
                    214
                  ],
                  "content": "Implement is_prime (you get to do this part with your group). 5.",
                  "type": "text"
                },
                {
                  "bbox": [
                    52,
                    200,
                    560,
                    226
                  ],
                  "content": "Check that is_prime(9) will return False by thinking through the execution of the code. 6.",
                  "type": "text"
                },
                {
                  "bbox": [
                    52,
                    214,
                    558,
                    241
                  ],
                  "content": "Check that is_prime(3) will return True and is_prime(1) will return False.",
                  "type": "text"
                }
              ],
              "index": 1
            }
          ],
          "index": 2
        },
        {
          "type": "text",
          "bbox": [
            52,
            248,
            288,
            261
          ],
          "lines": [
            {
              "bbox": [
                52,
                248,
                290,
                263
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    248,
                    290,
                    263
                  ],
                  "content": "Try this approach together on the next two problems.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 3
        },
        {
          "type": "text",
          "bbox": [
            52,
            268,
            560,
            324
          ],
          "lines": [
            {
              "bbox": [
                51,
                268,
                560,
                326
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    268,
                    497,
                    281
                  ],
                  "content": "Important: It’s highly recommended that you don’t check your work using a computer right away.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    268,
                    559,
                    297
                  ],
                  "content": "Instead, talk to your group and think to try to figure out if an answer is correct.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    283,
                    560,
                    312
                  ],
                  "content": "On exams, you won’t be able to guess and check because you won’t have a Python interpreter.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    297,
                    560,
                    326
                  ],
                  "content": "Now is a great time to practice checking your work by thinking through examples.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 4
        },
        {
          "type": "title",
          "bbox": [
            53,
            339,
            126,
            352
          ],
          "lines": [
            {
              "bbox": [
                52,
                339,
                126,
                354
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    339,
                    126,
                    354
                  ],
                  "content": "Q3: Is Prime?",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 5
        },
        {
          "type": "text",
          "bbox": [
            52,
            361,
            481,
            374
          ],
          "lines": [
            {
              "bbox": [
                51,
                360,
                481,
                374
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    360,
                    481,
                    374
                  ],
                  "content": "Write a function that returns True if a positive integer n is a prime number and False otherwise.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 6
        },
        {
          "type": "text",
          "bbox": [
            51,
            381,
            555,
            408
          ],
          "lines": [
            {
              "bbox": [
                51,
                381,
                558,
                408
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    381,
                    475,
                    394
                  ],
                  "content": "A prime number n is a number that is not divisible by any numbers other than 1 and n itself.",
                  "type": "text"
                },
                {
                  "bbox": [
                    51,
                    381,
                    558,
                    408
                  ],
                  "content": "For example, 13 is prime, since it is only divisible by 1 and 13, but 14 is not, since it is divisible by 1, 2, 7, and 14.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 7
        },
        {
          "type": "text",
          "bbox": [
            52,
            416,
            374,
            429
          ],
          "lines": [
            {
              "bbox": [
                52,
                414,
                376,
                431
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    414,
                    376,
                    431
                  ],
                  "content": "Use the \\% operator: x % y returns the remainder of \\mathtt { x } when divided by y.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 8
        },
        {
          "type": "table",
          "bbox": [
            46,
            441,
            523,
            592
          ],
          "blocks": [
            {
              "type": "table_body",
              "bbox": [
                46,
                441,
                523,
                592
              ],
              "group_id": 0,
              "lines": [
                {
                  "bbox": [
                    46,
                    441,
                    523,
                    592
                  ],
                  "spans": [
                    {
                      "bbox": [
                        46,
                        441,
                        523,
                        592
                      ],
                      "score": 0.205,
                      "html": "<table><tr><td>def is_prime(n):</td></tr><tr><td>II II &quot;</td></tr><tr><td>&gt;&gt;&gt; is_prime(10)</td></tr><tr><td>False</td></tr><tr><td>&gt;&gt;&gt; is_prime(7)</td></tr><tr><td>True</td></tr><tr><td>&gt;&gt; is_prime(1) # one is not a prime number!!</td></tr><tr><td>False</td></tr><tr><td>&quot; I &quot;*** YOUR CODE HERE ***&quot;</td></tr></table>",
                      "type": "table",
                      "image_path": "183cd191449c76733b39d5168b94a3d9cc5c2b07de5e1101bb69ae364c7dafb5.jpg"
                    }
                  ]
                }
              ],
              "index": 23,
              "virtual_lines": [
                {
                  "bbox": [
                    46,
                    441,
                    523,
                    491.3333333333333
                  ],
                  "spans": [],
                  "index": 22
                },
                {
                  "bbox": [
                    46,
                    491.3333333333333,
                    523,
                    541.6666666666666
                  ],
                  "spans": [],
                  "index": 23
                },
                {
                  "bbox": [
                    46,
                    541.6666666666666,
                    523,
                    592.0
                  ],
                  "spans": [],
                  "index": 24
                }
              ]
            }
          ],
          "index": 9,
          "lines": []
        }
      ],
      "page_idx": 2,
      "page_size": [
        612,
        792
      ]
    },
    {
      "preproc_blocks": [
        {
          "type": "title",
          "bbox": [
            53,
            46,
            147,
            59
          ],
          "lines": [
            {
              "bbox": [
                52,
                45,
                148,
                60
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    45,
                    148,
                    60
                  ],
                  "content": "Q4: Unique Digits",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 0
        },
        {
          "type": "text",
          "bbox": [
            53,
            67,
            398,
            79
          ],
          "lines": [
            {
              "bbox": [
                51,
                65,
                399,
                81
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    65,
                    399,
                    81
                  ],
                  "content": "Write a function that returns the number of unique digits in a positive integer.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 1
        },
        {
          "type": "text",
          "bbox": [
            72,
            87,
            532,
            100
          ],
          "lines": [
            {
              "bbox": [
                75,
                85,
                532,
                101
              ],
              "spans": [
                {
                  "bbox": [
                    75,
                    85,
                    532,
                    101
                  ],
                  "content": "Hints: You can use // and \\% to separate a positive integer into its one’s digit and the rest of its digits.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 2
        },
        {
          "type": "text",
          "bbox": [
            73,
            107,
            534,
            135
          ],
          "lines": [
            {
              "bbox": [
                76,
                107,
                534,
                135
              ],
              "spans": [
                {
                  "bbox": [
                    76,
                    107,
                    534,
                    135
                  ],
                  "content": "You may find it helpful to first define a function has_digit(n, k), which determines whether a number n has digit k.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 3
        },
        {
          "type": "table",
          "bbox": [
            46,
            139,
            527,
            614
          ],
          "blocks": [
            {
              "type": "table_body",
              "bbox": [
                46,
                139,
                527,
                614
              ],
              "group_id": 0,
              "lines": [
                {
                  "bbox": [
                    46,
                    139,
                    527,
                    614
                  ],
                  "spans": [
                    {
                      "bbox": [
                        46,
                        139,
                        527,
                        614
                      ],
                      "score": 0.293,
                      "html": "<table><tr><td>def unique_digits(n): &quot;&quot;&quot;Return the number of unique digits in positive integer n.</td></tr><tr><td></td></tr><tr><td>&gt;&gt;&gt; unique_digits(8675309) # All are unique 7</td></tr><tr><td>&gt;&gt; unique_digits(13173131) # 1, 3, and 7 3</td></tr><tr><td>&gt;&gt;&gt; unique_digits(101) # 0 and 1 2</td></tr><tr><td>II  &quot;I</td></tr><tr><td>&quot;*** YOUR CODE HERE ***&quot;</td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr><tr><td>def has_digit(n, k):</td></tr><tr><td>&quot;&quot;&quot;Returns whether k is a digit in n.</td></tr><tr><td></td></tr><tr><td>&gt;&gt;&gt; has_digit(10, 1)</td></tr><tr><td></td></tr><tr><td>True</td></tr><tr><td>&gt;&gt;&gt; has_digit(12, 7)</td></tr><tr><td></td></tr><tr><td>False</td></tr><tr><td></td></tr><tr><td>II I &quot;I</td></tr><tr><td>assert k &gt;= 0 and k &lt; 10</td></tr></table>",
                      "type": "table",
                      "image_path": "ff21fbf9dea4f8ccb1d5ffc6c075a08517ec5b13a7391e50f9ef7410ab5f51f4.jpg"
                    }
                  ]
                }
              ],
              "index": 6,
              "virtual_lines": [
                {
                  "bbox": [
                    46,
                    139,
                    527,
                    297.33333333333337
                  ],
                  "spans": [],
                  "index": 5
                },
                {
                  "bbox": [
                    46,
                    297.33333333333337,
                    527,
                    455.66666666666674
                  ],
                  "spans": [],
                  "index": 6
                },
                {
                  "bbox": [
                    46,
                    455.66666666666674,
                    527,
                    614.0000000000001
                  ],
                  "spans": [],
                  "index": 7
                }
              ]
            }
          ],
          "index": 4,
          "lines": []
        }
      ],
      "page_idx": 3,
      "page_size": [
        612,
        792
      ]
    },
    {
      "preproc_blocks": [
        {
          "type": "title",
          "bbox": [
            53,
            46,
            153,
            59
          ],
          "lines": [
            {
              "bbox": [
                52,
                45,
                153,
                62
              ],
              "spans": [
                {
                  "bbox": [
                    52,
                    45,
                    153,
                    62
                  ],
                  "content": "Q5: Ordered Digits",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 0
        },
        {
          "type": "text",
          "bbox": [
            52,
            67,
            560,
            108
          ],
          "lines": [
            {
              "bbox": [
                51,
                67,
                561,
                108
              ],
              "spans": [
                {
                  "bbox": [
                    51,
                    67,
                    559,
                    95
                  ],
                  "content": "Implement the function ordered_digits, which takes as input a positive integer and returns True if its digits, read left to right, are in non-decreasing order, and False otherwise.",
                  "type": "text"
                },
                {
                  "bbox": [
                    52,
                    79,
                    561,
                    108
                  ],
                  "content": "For example, the digits of 5, 11, 127, 1357 are ordered, but not those of 21 or 1375.",
                  "type": "text"
                }
              ],
              "index": 0
            }
          ],
          "index": 1
        },
        {
          "type": "table",
          "bbox": [
            48,
            120,
            526,
            399
          ],
          "blocks": [
            {
              "type": "table_body",
              "bbox": [
                48,
                120,
                526,
                399
              ],
              "group_id": 0,
              "lines": [
                {
                  "bbox": [
                    48,
                    120,
                    526,
                    399
                  ],
                  "spans": [
                    {
                      "bbox": [
                        48,
                        120,
                        526,
                        399
                      ],
                      "score": 0.461,
                      "html": "<table><tr><td>def ordered_digits(x): &quot;&quot;&quot;Return True if the (base 10) digits of X&gt;0 are in non-decreasing</td></tr></table>",
                      "type": "table",
                      "image_path": "23b911171e23c7874f2e95a8fae2eec88ddd2f054f414ec0e8548254d68af0aa.jpg"
                    }
                  ]
                }
              ],
              "index": 5,
              "virtual_lines": [
                {
                  "bbox": [
                    48,
                    120,
                    526,
                    213.0
                  ],
                  "spans": [],
                  "index": 4
                },
                {
                  "bbox": [
                    48,
                    213.0,
                    526,
                    306.0
                  ],
                  "spans": [],
                  "index": 5
                },
                {
                  "bbox": [
                    48,
                    306.0,
                    526,
                    399.0
                  ],
                  "spans": [],
                  "index": 6
                }
              ]
            }
          ],
          "index": 2,
          "lines": []
        }
      ],
      "page_idx": 4,
      "page_size": [
        612,
        792
      ]
    }
  ],
  "_backend": "pipeline",
  "_version_name": "2.5.3"
}