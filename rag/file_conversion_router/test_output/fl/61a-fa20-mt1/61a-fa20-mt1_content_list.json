[
    {
        "type": "text",
        "text": "INSTRUCTIONS ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "This is your exam. Complete it either at exam.cs61a.org or, if that doesn’t work, by emailing course staff with your solutions before the exam deadline. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "This exam is intended for the student with email address <EMAILADDRESS>. If this is not your email address, notify course staff immediately, as each exam is different. Do not distribute this exam PDF even after the exam ends, as some students may be taking the exam in a different time zone. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "For questions with circular bubbles, you should select exactly one choice. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "$\\bigcirc$ You must choose either this option $\\bigcirc$ Or this one, but not both! ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "For questions with square checkboxes, you may select multiple choices. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "You could select this choice. You could select this one too! ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "You may start your exam now. Your exam is due at $<$ <DEADLINE $>$ Pacific Time. Go to the next pag to begin. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Preliminaries ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "You can complete and submit these questions before the exam starts. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "(a) What is your full name? ",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/3bab9780b392f0fad3d1518e08d749c68fd4e6bdc131f563590e1333ff142572.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "(b) What is your student ID number? ",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/2c64135c453db238782734a89aeb2f9707cdae1f8f9122b7354e0443e0039ac1.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1. (14.0 points) Down for the Count ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Definition. A digit is a non-negative integer less than 10. Integers contain digits. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Examples. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "The integer 21 contains the digits 1 and 2.   \nThe integer 474 contains the digit 4 twice and the digit 7 once.   \nThe integer 400 contains the digit 4 once and the digit 0 twice.   \nThe integer -77 contains the digit 7 twice.   \nThe integer 0 is a 0-digit number that contains no digits. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Reminders. ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "• You may call built-in functions that do not require import, such as min, max, abs, and pow. • You may call functions defined in earlier parts of the question in your implementation for later parts, and you may assume that the functions you call are implemented correctly. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "RESTRICTION. You may not call str or repr or use [ or ] in any part of this question. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "(a) (4.0 points) ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Implement count, which takes a digit element and an integer box. It returns the number of times that element appears in box. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Warning: n % d and n // d may not behave as you expect for negative n. For example, -123 % 10 evaluates to 7. -1 // 10 evaluates to -1. You do not need to know how these operators apply to negative n in order to solve this problem. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "def count(element, box): \"\"\"Count how many times digit element appears in integer box. >>> count(2, 222122) 5 >>> count(0, -2020) 2 >>> count(0, 0) # 0 has no digits 0 ·… assert element $>=~0$ and element < 10 ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "(a) total $\\mathit{\\Theta}=\\mathit{\\Theta}0$ while box > 0: if (b) total $\\mathbf{\\Sigma}=\\mathbf{\\Sigma}$ (c) box $\\mathbf{\\Sigma}=\\mathbf{\\Sigma}$ box // 10 return total ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "i. (2.0 pt) Fill in blank (a). ",
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/49201ca8d3368dab38959a360a183b99454edba36fd6e8c926e4973f55c7eed9.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "ii. $\\mathbf{(1.0\\pt)}$ Which of these could fill in blank (b)? ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "$\\bigcirc$ box $\\scriptstyle==$ element $\\bigcirc$ box % $10~==$ element $\\bigcirc$ box % element == 0 $\\bigcirc$ box % element > 0 iii. $\\mathbf{(1.0\\pt)}$ Which of these could fill in blank (c)? ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "total + 1   \nelement   \ntotal $^+$ element   \nbox % 10   \ntotal $^+$ box % 10 ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "(b) (5.0 points) ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Implement count_nine, which takes a digit element and a non-negative integer box. It returns the number of times that element appears in box and is not adjacent to a 9. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "count_nine(element, box):   \n\"\"\"Count how many times digit element appears in the non-negative i box in a place that is not next to a 9.   \n>>> count_nine(2, 222122)   \n5   \n>>> count_nine(1, 1911191) # Only the middle 1 is not next to a 9 1   \n>>> count_nine(9, 9)   \n1   \n>>> count_nine(9, 99)   \n0   \n>>> count_nine(3, 314159265359)   \n2   \n>>> count_nine(5, 314159265359)   \n1   \n$\\ggg>>$ count_nine(9, 314159265359)   \n2   \n$\\ggg>>$ count_nine(0, 0) # No digits are in 0   \n0   \n\"\"\"   \nassert element $>=~0$ and element $\\angle\\cdot\\angle$ 10   \nassert box $>=~0$   \nnine, total $\\mathbf{\\tau}=\\mathbf{\\tau}$ False, 0   \nwhile box $>0$ :   \nif and not (nine or   \n(a) (b)   \ntotal $\\mathbf{\\Sigma}=\\mathbf{\\Sigma}$   \n(c)   \n$\\mathrm{nine}~=~\\csc_{\\mathrm{--},\\mathrm{~(d)~}}==~9$   \nbox $\\mathbf{\\tau}=\\mathbf{\\tau}$ box // 10   \nreturn total ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "i. $({\\bf1.0_{\\nabla p t}})$ Which of these could fill in blank (a)? ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "box $\\scriptstyle==$ element box % $10\\ ==$ element box % element $\\scriptstyle==0$ box % element > 0 ii. (2.0 pt) Fill in blank (b). ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/e042835048293ad479c9a7173442222cfd71655b9196884d26e1966d545b07a7.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "iii. $\\mathbf{(1.0\\pt)}$ Which of these could fill in blank (c)? ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "total + 1   \nelement   \ntotal $^+$ element   \nbox % 10   \ntotal + box % 10 ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "iv. $\\mathbf{(1.0\\pt)}$ Fill in blank (d). ",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/be567ca2eb818ffbdf504b06e5efe4871eb4328c1576b6593b4080a15451c6d2.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "(c) (5.0 points) ",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Implement fit, which takes two non-negative integers pegs and holes. It returns whether every digit in pegs appears at least as many times in holes as it does in pegs. ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "def fit(pegs, holes): \"\"\"Return whether every digit in pegs appears at least as many times in holes as it does in pegs. >>> fit(123, 321) # Each digit appears once in pegs and in holes. True >>> fit(1213, 33221) # 1 appears twice in pegs, but only once in holes. False $\\ggg>>$ fit(12, 22) # 1 appears once in pegs, but not at all in holes. False $\\ggg>>$ fit(314159, 112233456789) True $\\dot{\\textbf{i}}=\\boldsymbol{0}$ while i ? (a) if (b) (c) i = i + 1 return (d) ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "i. $\\mathbf{(1.0\\pt)}$ Fill in blank (a). ",
        "page_idx": 6
    },
    {
        "type": "table",
        "img_path": "images/7d3fd102159a97da441cb9e70d395cfed85fd6c85f5449d9a21e2f6cd3f77050.jpg",
        "table_caption": [],
        "table_footnote": [],
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "ii. $\\mathbf{\\left(2.0\\pt\\right)}$ Fill in blank (b). ",
        "page_idx": 6
    },
    {
        "type": "image",
        "img_path": "images/198a6a5e20aca34bb4f61a78ec78f2ffd42f6c1ef37ac68b4397c75df35deae7.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "iii. (1.0 pt) Fill in blank (c). ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "iv. $\\mathbf{(1.0\\pt)}$ Which of these could fill in blank (d)? ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "True False holes > pegs pegs $>$ holes holes >= pegs pegs $>=$ holes ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "2. (8.0 points) Mystery Function ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Assume mystery is a deterministic pure function that takes one integer argument, returns an integer, and never errors. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "def mystery(n):   \nAssume the following functions are also defined:   \ndef add_two(y): return y + 2   \ndef two(y): return 2   \ndef constant(k): def ignore(x): return k return ignore   \ndef diff(f, g): return lambda z: abs(f(z) - g(z)) ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Definition. Two functions f and $\\mathsf{g}$ have identical behavior if $\\mathbf{f}\\left(\\mathbf{x}\\right)$ and $\\mathtt{g}(\\mathtt{x})$ return equal values or return functions with identical behavior, for every $\\mathbf{x}$ that does not cause an error. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Complete each statement below so that it is true for all possible deterministic pure mystery functions. ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "(a) $\\mathbf{\\left(2.0\\pt\\right)}$ The result of evaluating constant(2) has identical behavior to the result of evaluating the expression. . . ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "add_two add_two(0) add_two(2) two two(0) . two(2) None of these ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "(b) $\\mathbf{\\left(2.0\\pt\\right)}$ The result of evaluating diff(constant(1), constant(-1)) has identical behavior to the resul of evaluating the expression. . . ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "constant constant(0) constant(2) diff(constant, constant) None of these ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "(c) $\\bf(2.0\\nabla\\ p t)$ The result of evaluating diff(mystery, mystery) has identical behavior to the result of evaluating the expression. . . ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "constant constant(0) constant(2) diff(constant, constant) constant(mystery) mystery None of these ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "(d) $\\mathbf{\\left(2.0\\pt\\right)}$ The result of evaluating diff(mystery, diff(mystery, mystery)) has identical behavior to the result of evaluating the expression. . . ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "mystery abs(mystery) . lambda y: abs(mystery(y)) . lambda y: mystery(abs(y)) . lambda y: lambda z: mystery(abs(y)) - mystery(abs(z)) lambda y: lambda z: abs(mystery(y)) - abs(mystery(z)) . lambda y: lambda z: abs(mystery(y) - mystery(z)) None of these ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "3. (8.0 points) Please Register to Vote ",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Fill in each blank in the code example below so that its environment diagram is the following. ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "RESTRICTIONS. You must use all of the blanks. Each blank can only include one statement or expression Click here to open the diagram in a new window ",
        "page_idx": 10
    },
    {
        "type": "image",
        "img_path": "images/6f93f81bb052042cedad2c1d9441143fc2613301e525a5b8435921c93e39d9a1.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "def vote(vote): ",
        "page_idx": 10
    },
    {
        "type": "equation",
        "text": "$$\n\\mathtt{p l e a s e\\ =\\ \\underbrace{\\_\\mathrm{--}\\_\\mathrm{-}}_{\\mathrm{(a)}}}\n$$",
        "text_format": "latex",
        "page_idx": 10
    },
    {
        "type": "equation",
        "text": "$$\n\\underbrace{\\texttt{--}\\texttt{--}}_{\\mathrm{(b)}}=\\texttt{t y}+\\texttt{3}\n$$",
        "text_format": "latex",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "return please ",
        "page_idx": 10
    },
    {
        "type": "equation",
        "text": "$$\n\\boldsymbol{\\mathsf{t y}}=\\boldsymbol{\\mathsf{1}}\n$$",
        "text_format": "latex",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "register $\\mathbf{\\tau}=\\mathbf{\\tau}$ (lambda nov: nov $^+$ ty) (c) ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "(d) register( (e) ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "(a) $\\mathbf{\\left(2.0\\pt\\right)}$ Which of these could fill in blank (a)? ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "vote(ty)   \nvote(30)   \nvote   \nlambda nov: vote(nov) $^+$ third   \nlambda nov: vote(nov $^+$ third)   \nlambda nov: vote(nov) + ty   \nlambda nov: vote(nov $^+$ ty) ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "(b) $\\mathbf{(1.0\\pt)}$ Which of these could fill in blank (b)? ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "third ty please vote ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "(c) $\\mathbf{(1.0\\pt)}$ Which of these could fill in blank (c)? ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "third ty please vote ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "(d) $\\mathbf{\\left(2.0\\pt\\right)}$ Fill in blank (d). ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "(e) $\\mathbf{\\left(2.0\\pt\\right)}$ Which of these could fill blank (e)? Check all that apply. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "ty \\* 10 ty - 1 + 30 30 third + 26 口 (lambda x: x + x)(15) ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "4. (10.0 points) Amazing Job Growth ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Definition. A repeatable function is a function that returns a repeatable function. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Reminder. You may call built-in functions that do not require import, such as min, max, abs, and pow. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "(a) (4.0 points) ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Implement growth, which takes a number baseline and returns a repeatable function increase. When increase is called on a number observed, it prints the difference between observed and the smallest argument passed to growth or increase so far among the repeated calls. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "def growth(baseline): \"\"\"Return a function that can be called repeatedly on numbers and prints the difference between its argument and the smallest argument used so far (including baseline). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": ">>> job $\\mathbf{\\tau}=\\mathbf{\\tau}$ growth(148)(149)(150)(130)(133)(139)(137)   \n1   \n2   \n0   \n3   \n9   \n7   \n\"\"\"   \ndef increase(observed): $\\mathrm{under~\\l=~\\underbrace{\\Sigma\\Sigma\\Sigma\\Sigma}_{\\Sigma\\Sigma\\Sigma\\left(a\\right)}-\\Sigma\\Sigma^{}--\\Sigma}$ print(observed - under) return (b)   \nreturn increase ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "i. $\\mathbf{\\left(2.0\\pt\\right)}$ Fill in blank (a). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "ii. $\\mathbf{\\left(2.0\\pt\\right)}$ Which of these could fill in blank (b)? ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "increase   \nincrease(under)   \nincrease(observed)   \nincrease(baseline)   \ngrowth   \ngrowth(under)   \ngrowth(observed)   \ngrowth(baseline) ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "(b) (6.0 points) ",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Implement maxer, a higher-order function that takes a function smoke, which takes a number and returns a number. The maxer function returns a repeatable function fire that takes a number y and prints the largest result of calling smoke on any value of y passed to fire so far among the repeated calls. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Assume that smoke is a deterministic pure function. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "def square $\\left(\\mathbf{\\boldsymbol{x}}\\right)$ : return x \\* x   \ndef maxer(smoke): \"\"\"Return a repeatable function fire(y) that prints the largest smoke(y) so far. >>> g = maxer(square) >>> h = g(2)(1)(3)(2)(-4) # print the largest square(y) so far 4 4 9 9 16 >>> h = maxer(abs)(2)(1)(3)(2)(-4) # print the largest abs(y) so far 2 2 3 3 4 \"\"\" ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "def fire(y):",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "(a) def haze $(z)$ : if (b) z = y return (c) return haze return fire ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "i. $\\mathbf{\\left(2.0\\pt\\right)}$ Fill in blank (a). You may not write a return statement for this blank. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "ii. (2.0 pt) Fill in blank (b). ",
        "page_idx": 14
    },
    {
        "type": "image",
        "img_path": "images/9e17e9bc78b56ef7ecdf6e16875a7c4602fd7cb282b9aa643b9d21337bed4d8d.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "iii. $\\mathbf{\\left(2.0\\pt\\right)}$ Which of these could fill in blank (c)? ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "smoke(y)  \nfire(y)fire(smoke(y))  \nhaze  \nhaze(y)  \nhaze(smoke(y))smoke(z)fire(z)fire(smoke(z))  \nhaze(z)haze(smoke(z))",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "No more questions. ",
        "page_idx": 15
    }
]